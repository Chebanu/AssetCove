// <auto-generated />
using System;
using AssetCove.Domain.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AssetCove.Domain.Migrations
{
    [DbContext(typeof(AssetCoveDbContext))]
    [Migration("20241215170650_AddInitialModels")]
    partial class AddInitialModels
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AssetCove.Contracts.Models.AssetTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Amount");

                    b.Property<decimal>("PricePerUnit")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("PricePerUnit");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2")
                        .HasColumnName("Timestamp");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int")
                        .HasColumnName("TransactionType");

                    b.Property<Guid>("UserAssetId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserAssetId");

                    b.HasKey("Id");

                    b.HasIndex("UserAssetId");

                    b.ToTable("AssetTransactions");
                });

            modelBuilder.Entity("AssetCove.Contracts.Models.Portfolio", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastUpdatedAt");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserId");

                    b.Property<int>("Visibility")
                        .HasColumnType("int")
                        .HasColumnName("Visibility");

                    b.HasKey("Id");

                    b.ToTable("Portfolios");
                });

            modelBuilder.Entity("AssetCove.Contracts.Models.PortfolioShare", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Email");

                    b.Property<Guid>("PortfolioId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PortfolioId");

                    b.HasKey("Id");

                    b.HasIndex("PortfolioId");

                    b.ToTable("PortfolioShares");
                });

            modelBuilder.Entity("AssetCove.Contracts.Models.UserAsset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Amount");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastUpdatedAt");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<Guid>("PortfolioId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PortfolioId");

                    b.Property<string>("Ticker")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasColumnName("Ticker");

                    b.HasKey("Id");

                    b.HasIndex("PortfolioId");

                    b.ToTable("UserAssets");
                });

            modelBuilder.Entity("AssetCove.Contracts.Models.AssetTransaction", b =>
                {
                    b.HasOne("AssetCove.Contracts.Models.UserAsset", "UserAsset")
                        .WithMany("Transactions")
                        .HasForeignKey("UserAssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserAsset");
                });

            modelBuilder.Entity("AssetCove.Contracts.Models.PortfolioShare", b =>
                {
                    b.HasOne("AssetCove.Contracts.Models.Portfolio", "Portfolio")
                        .WithMany("ShareableEmails")
                        .HasForeignKey("PortfolioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Portfolio");
                });

            modelBuilder.Entity("AssetCove.Contracts.Models.UserAsset", b =>
                {
                    b.HasOne("AssetCove.Contracts.Models.Portfolio", "Portfolio")
                        .WithMany("UserAssets")
                        .HasForeignKey("PortfolioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Portfolio");
                });

            modelBuilder.Entity("AssetCove.Contracts.Models.Portfolio", b =>
                {
                    b.Navigation("ShareableEmails");

                    b.Navigation("UserAssets");
                });

            modelBuilder.Entity("AssetCove.Contracts.Models.UserAsset", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
